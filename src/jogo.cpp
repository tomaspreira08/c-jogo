#include <iostream>
#include <thread>
#include <chrono>
#include <cstdlib>
#include "../include/jogo.hpp"
#include "../include/perguntas.hpp"
#include "../include/utils.hpp"

void animarMovimento(Corredor& jogador, int dado) {
    jogador.posicao += dado; // Atualiza a posi√ß√£o do jogador com base no dado
    // Aqui voc√™ pode adicionar l√≥gica para animar o movimento, se necess√°rio
}

void animarChegada(const Corredor& jogador, int meta) {
    std::cout << "\nüéâ " << jogador.nome << " est√° chegando √† meta!\n";
    for (int i = jogador.posicao; i <= meta; ++i) {
        std::cout << "\r" << jogador.nome << " est√° na casa " << i << " " << std::flush;
        std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Tempo de espera para a anima√ß√£o
    }
    std::cout << "\nüèÅ " << jogador.nome << " cruzou a linha de chegada! üéâ\n";
}

void mostrarCorrida(const std::vector<Corredor>& jogadores, int meta) {
    std::cout << "üèÅ Corrida (meta: " << meta << " casas)\n\n";
    for (const auto& j : jogadores) {
        std::cout << j.nome << ": ";
        for (int i = 0; i < meta; ++i) {
            if (i == j.posicao)
                std::cout << "üöó";
            else if (i == meta - 1)
                std::cout << "üèÅ";
            else
                std::cout << "-";
        }
        std::cout << " (" << j.posicao << "/" << meta << ")\n";
    }
    std::cout << "\n";
}


void turnoJogador(Corredor& jogador) {
    std::cout << "\nüéÆ Turno de " << jogador.nome << "\n";
    Pergunta p = obterPerguntaAleatoria();
    bool acertou = fazerPergunta(p);

    if (acertou) {
        std::cout << "üéØ Correto! A lan√ßar o dado...\n";
        for (int i = 0; i < 10; ++i) {
            int n = rand() % 6 + 1;
            std::cout << "\rüé≤ A girar... " << n << "   " << std::flush;
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }

        int dado = rand() % 6 + 1;
        std::cout << "\rüé≤ Saiu: " << dado << "! Avan√ßas " << dado << " casas.\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
        animarMovimento(jogador, dado);
    } else {
        std::cout << "‚ùå Errado! Ficas na mesma posi√ß√£o.\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(1500));
    }
}

